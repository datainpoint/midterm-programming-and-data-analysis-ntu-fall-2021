import unittest
import ipynb.fs.full.midterm as ex

class TestMidterm(unittest.TestCase):
    def test_01_flip_dict_key_value_pairs(self):
        self.assertEqual(ex.flip_dict_key_value_pairs({'TWN': 'Taiwan'}),
         {'Taiwan': 'TWN'})
        self.assertEqual(ex.flip_dict_key_value_pairs({'TWN': 'Taiwan', 'JPN': 'Japan', 'LTU': 'Lithuania', 'SVN': 'Slovenia'}),
         {'Taiwan': 'TWN', 'Japan': 'JPN', 'Lithuania': 'LTU', 'Slovenia': 'SVN'})
        self.assertEqual(ex.flip_dict_key_value_pairs({'JPN': 'Japan'}), {'Japan': 'JPN'})
    def test_02_RangePrime(self):
        range_prime = ex.RangePrime(1, 5)   
        self.assertEqual(range_prime.range_list, [1, 2, 3, 4, 5])
        self.assertEqual(range_prime.filter_primes(), [2, 3, 5])
        range_prime = ex.RangePrime(6, 15)
        self.assertEqual(range_prime.range_list, [6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        self.assertEqual(range_prime.filter_primes(), [7, 11, 13])
        range_prime = ex.RangePrime(16, 20)
        self.assertEqual(range_prime.range_list, [16, 17, 18, 19, 20])
        self.assertEqual(range_prime.filter_primes(), [17, 19])
    def test_03_MinMaxFinder(self):
        min_max_finder = ex.MinMaxFinder([2, 3, 5, 7, 11])
        self.assertEqual(min_max_finder.get_min(), 2)
        self.assertEqual(min_max_finder.get_max(), 11)
        self.assertEqual(min_max_finder.get_idxmin(), [0])
        self.assertEqual(min_max_finder.get_idxmax(), [4])
        min_max_finder = ex.MinMaxFinder([2, 2, 3, 5, 7, 11, 11])
        self.assertEqual(min_max_finder.get_min(), 2)
        self.assertEqual(min_max_finder.get_max(), 11)
        self.assertEqual(min_max_finder.get_idxmin(), [0, 1])
        self.assertEqual(min_max_finder.get_idxmax(), [5, 6])
        min_max_finder = ex.MinMaxFinder([13, 13, 5, 5, 5])
        self.assertEqual(min_max_finder.get_min(), 5)
        self.assertEqual(min_max_finder.get_max(), 13)
        self.assertEqual(min_max_finder.get_idxmin(), [2, 3, 4])
        self.assertEqual(min_max_finder.get_idxmax(), [0, 1])
    def test_04_PigLatin(self):
        pig_latin = ex.PigLatin("pig")
        self.assertEqual(pig_latin.original_word, 'pig')
        self.assertEqual(pig_latin.alter(), 'igpay')
        pig_latin = ex.PigLatin("smile")
        self.assertEqual(pig_latin.original_word, 'smile')
        self.assertEqual(pig_latin.alter(), 'ilesmay')
        pig_latin = ex.PigLatin("eat")
        self.assertEqual(pig_latin.original_word, 'eat')
        self.assertEqual(pig_latin.alter(), 'eatyay')
        pig_latin = ex.PigLatin("banana")
        self.assertEqual(pig_latin.original_word, 'banana')
        self.assertEqual(pig_latin.alter(), 'ananabay')
        pig_latin = ex.PigLatin("string")
        self.assertEqual(pig_latin.original_word, 'string')
        self.assertEqual(pig_latin.alter(), 'ingstray')
        pig_latin = ex.PigLatin("omelet")
        self.assertEqual(pig_latin.original_word, 'omelet')
        self.assertEqual(pig_latin.alter(), 'omeletyay')
    def test_05_RotThirteen(self):
        rot_13 = ex.RotThirteen()
        self.assertEqual(rot_13.rotate_char("A"), 'N')
        self.assertEqual(rot_13.rotate_char("a"), 'n')
        self.assertEqual(rot_13.rotate_char("B"), 'O')
        self.assertEqual(rot_13.rotate_char("b"), 'o')
        self.assertEqual(rot_13.rotate_sentence("Ornhgvshy vf orggre guna htyl."), 'Beautiful is better than ugly.')
        self.assertEqual(rot_13.rotate_sentence("Abj vf orggre guna arire."), 'Now is better than never.')
    def test_06_lookup_zip_codes(self):
        self.assertEqual(ex.lookup_zip_codes("臺北市", "中正區"), '100')
        self.assertEqual(ex.lookup_zip_codes("基隆市", "中正區"), '202')
        self.assertEqual(ex.lookup_zip_codes("臺北市", "中山區"), '104')
        self.assertEqual(ex.lookup_zip_codes("基隆市", "中山區"), '203')
        self.assertEqual(ex.lookup_zip_codes("臺北市", "大安區"), '106')
        self.assertEqual(ex.lookup_zip_codes("臺中市", "大安區"), '439')
        self.assertEqual(ex.lookup_zip_codes("臺北市", "內湖區"), '114')
    def test_07_lookup_country_iso_codes(self):
        self.assertEqual(ex.lookup_country_iso_codes("Taiwan"), ('TW', 'TWN'))
        self.assertEqual(ex.lookup_country_iso_codes("Japan"), ('JP', 'JPN'))
        self.assertEqual(ex.lookup_country_iso_codes("Lithuania"),  ('LT', 'LTU'))
        self.assertEqual(ex.lookup_country_iso_codes("Slovenia"), ('SI', 'SVN'))
        self.assertEqual(ex.lookup_country_iso_codes("Czechia"),  ('CZ', 'CZE'))
        self.assertEqual(ex.lookup_country_iso_codes("United States of America (the)"), ('US', 'USA'))
    def test_08_CoachRoster(self):
        cr = ex.CoachRoster("coaches.json")
        self.assertEqual(cr.get_head_coach("ATL"), 'Nate McMillan')
        self.assertIn('Nick Van Exel', cr.get_assistant_coaches("ATL"))
        self.assertIn('Jamelle McMillan', cr.get_assistant_coaches("ATL"))
        self.assertEqual(cr.get_head_coach("BKN"), 'Steve Nash')
        self.assertIn('Tiago Splitter', cr.get_assistant_coaches("BKN"))
        self.assertIn('Jacque Vaughn', cr.get_assistant_coaches("BKN"))
        self.assertEqual(cr.get_head_coach("POR"), 'Chauncey Billups')
        self.assertEqual(cr.get_head_coach("SAS"), 'Gregg Popovich')
    def test_09_find_tallest_shortest_players(self):
        self.assertAlmostEqual(ex.find_tallest_shortest_players('tallest')['heightMeters'], 2.29)
        self.assertEqual(ex.find_tallest_shortest_players('tallest')['players'], ['Tacko Fall'])
        self.assertAlmostEqual(ex.find_tallest_shortest_players('shortest')['heightMeters'], 1.78)
        self.assertEqual(ex.find_tallest_shortest_players('shortest')['players'], ['Facundo Campazzo', 'Markus Howard'])
    def test_10_get_current_team_roster(self):
        self.assertIsInstance(ex.get_current_team_roster("BKN"), list)
        self.assertIn("Kevin Durant", ex.get_current_team_roster("BKN"))
        self.assertIn("James Harden", ex.get_current_team_roster("BKN"))
        self.assertIsInstance(ex.get_current_team_roster("MIA"), list)
        self.assertIn("Jimmy Butler", ex.get_current_team_roster("MIA"))
        self.assertIn("Bam Adebayo", ex.get_current_team_roster("MIA"))
        self.assertIn("Nikola Jokic", ex.get_current_team_roster("DEN"))
        self.assertIn("Luka Doncic", ex.get_current_team_roster("DAL"))

suite = unittest.TestLoader().loadTestsFromTestCase(TestMidterm)
runner = unittest.TextTestRunner(verbosity=2)
if __name__ == '__main__':
    test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))